{"version":3,"file":"static/js/402.ecf08ec5.chunk.js","mappings":"kLAIA,MAAMA,EACc,mBADdA,EAEc,mBAFdA,EAGkB,uBAHlBA,EAIM,WA8GZ,EA3GmBC,KACjB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAO,OACjBC,EAAWC,IAAgBC,EAAAA,EAAAA,UAASR,IACpCS,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,MAErCG,EAAAA,UAAgB,KACdC,IACO,KACDH,GACFA,EAAOI,YAAYC,QAAQC,GAASA,EAAMC,UAG7C,IAEH,MAAMJ,EAAcK,UAClB,IACE,MAAMC,QAAoBC,UAAUC,aAAaC,aAAa,CAC5DC,MAAO,CAAEC,WAAY,iBAEnBnB,EAASoB,UACXpB,EAASoB,QAAQC,UAAYP,GAE/BR,EAAUQ,EACZ,CAAE,MAAOQ,GACPC,QAAQD,MAAM,0BAA2BA,EAC3C,GAGIE,GAAaC,EAAAA,EAAAA,aAAY,KAEzBvB,IAAcN,EAChB8B,WAAW,KACTvB,EAAaP,GACb8B,WAAW,KACTvB,EAAaP,IACZ,MACF,KACMM,IAAcN,GACvB8B,WAAW,KACTvB,EAAaP,GACb8B,WAAW,KACT5B,EAAS,kBACR,MACF,MAEJ,CAACI,EAAWJ,IA2Bf,OACE6B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,cAAcG,QAASA,IAAMjC,EAAS,KAAK+B,SAAC,YAG9DC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,aAAYC,SAAC,uBAG/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SACEE,IAAKhC,EACLiC,UAAQ,EACRC,aAAW,EACXN,UAAU,iBAGZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,8BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gCACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iCAEfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAYG,QAASP,WAIxCM,EAAAA,EAAAA,KAAA,OAAKF,UAAS,eAAAO,OArCKC,MACrB,OAAQlC,GACN,KAAKN,EACL,KAAKA,EACH,MAAO,iBACT,QACE,MAAO,KA+BsBwC,IAAmBP,UAChDC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SArDPQ,MACvB,OAAQnC,GACN,KAAKN,EACH,MAAO,uBACT,KAAKA,EACH,MAAO,yCACT,KAAKA,EACH,MAAO,0BACT,KAAKA,EACH,MAAO,2BACT,QACE,MAAO,KA0CqByC,U","sources":["components/screens/ScanScreen.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './ScanScreen.css';\n\nconst SCAN_STATES = {\n  SCANNING_PRODUCT: 'SCANNING_PRODUCT',\n  PRODUCT_VERIFIED: 'PRODUCT_VERIFIED',\n  SCANNING_CERTIFICATE: 'SCANNING_CERTIFICATE',\n  COMPLETE: 'COMPLETE'\n};\n\nconst ScanScreen = () => {\n  const navigate = useNavigate();\n  const videoRef = useRef(null);\n  const [scanState, setScanState] = useState(SCAN_STATES.SCANNING_PRODUCT);\n  const [stream, setStream] = useState(null);\n\n  React.useEffect(() => {\n    startCamera();\n    return () => {\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  const startCamera = async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' }\n      });\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n      setStream(mediaStream);\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n    }\n  };\n\n  const handleScan = useCallback(() => {\n    // Simulate scanning process\n    if (scanState === SCAN_STATES.SCANNING_PRODUCT) {\n      setTimeout(() => {\n        setScanState(SCAN_STATES.PRODUCT_VERIFIED);\n        setTimeout(() => {\n          setScanState(SCAN_STATES.SCANNING_CERTIFICATE);\n        }, 2000);\n      }, 3000);\n    } else if (scanState === SCAN_STATES.SCANNING_CERTIFICATE) {\n      setTimeout(() => {\n        setScanState(SCAN_STATES.COMPLETE);\n        setTimeout(() => {\n          navigate('/certificates');\n        }, 2000);\n      }, 3000);\n    }\n  }, [scanState, navigate]);\n\n  const getStatusMessage = () => {\n    switch (scanState) {\n      case SCAN_STATES.SCANNING_PRODUCT:\n        return \"Scan product barcode\";\n      case SCAN_STATES.PRODUCT_VERIFIED:\n        return \"Product verified! Now scan certificate\";\n      case SCAN_STATES.SCANNING_CERTIFICATE:\n        return \"Scanning certificate...\";\n      case SCAN_STATES.COMPLETE:\n        return \"Authentication complete!\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getStatusClass = () => {\n    switch (scanState) {\n      case SCAN_STATES.PRODUCT_VERIFIED:\n      case SCAN_STATES.COMPLETE:\n        return 'status-success';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className=\"scan-container\">\n      <div className=\"scan-header\">\n        <button className=\"back-button\" onClick={() => navigate('/')}>\n          [Back]\n        </button>\n        <span className=\"scan-title\">AUTHENTICATION</span>\n      </div>\n\n      <div className=\"camera-view\">\n        <video \n          ref={videoRef}\n          autoPlay\n          playsInline\n          className=\"camera-feed\"\n        />\n        \n        <div className=\"scan-overlay\">\n          <div className=\"corner-bracket top-left\"></div>\n          <div className=\"corner-bracket top-right\"></div>\n          <div className=\"corner-bracket bottom-left\"></div>\n          <div className=\"corner-bracket bottom-right\"></div>\n          \n          <div className=\"scan-ring\" onClick={handleScan}></div>\n        </div>\n      </div>\n\n      <div className={`scan-status ${getStatusClass()}`}>\n        <p className=\"status-text\">{getStatusMessage()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ScanScreen;\n\n\n"],"names":["SCAN_STATES","ScanScreen","navigate","useNavigate","videoRef","useRef","scanState","setScanState","useState","stream","setStream","React","startCamera","getTracks","forEach","track","stop","async","mediaStream","navigator","mediaDevices","getUserMedia","video","facingMode","current","srcObject","error","console","handleScan","useCallback","setTimeout","_jsxs","className","children","_jsx","onClick","ref","autoPlay","playsInline","concat","getStatusClass","getStatusMessage"],"sourceRoot":""}