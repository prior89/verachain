{"version":3,"file":"static/js/877.ea57f1eb.chunk.js","mappings":"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","sources":["components/screens/RegisterScreen.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\nimport './RegisterScreen.css';\n\nconst RegisterScreen = () => {\n  const navigate = useNavigate();\n  const { register, isAuthenticated } = useAuth();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/');\n    }\n  }, [isAuthenticated, navigate]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n    \n    // Clear error for this field\n    if (errors[name]) {\n      setErrors({\n        ...errors,\n        [name]: ''\n      });\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    // Name validation\n    if (!formData.name) {\n      newErrors.name = 'Name is required';\n    } else if (formData.name.length < 2) {\n      newErrors.name = 'Name must be at least 2 characters';\n    }\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!formData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!emailRegex.test(formData.email)) {\n      newErrors.email = 'Invalid email format';\n    }\n\n    // Password validation\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n\n    // Confirm password validation\n    if (!formData.confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const result = await register({\n        name: formData.name,\n        email: formData.email,\n        password: formData.password\n      });\n\n      if (result.success) {\n        navigate('/');\n      } else {\n        setErrors({ \n          general: result.error || 'Registration failed' \n        });\n      }\n    } catch (err) {\n      setErrors({ \n        general: 'Network error. Please try again.' \n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"register-screen\">\n      <div className=\"register-container\">\n        <div className=\"register-header\">\n          <h1>VERACHAIN</h1>\n          <p className=\"subtitle\">Create Your Account</p>\n        </div>\n\n        <form className=\"register-form\" onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              placeholder=\"Enter your name\"\n              className={errors.name ? 'error' : ''}\n              autoComplete=\"name\"\n            />\n            {errors.name && (\n              <span className=\"error-text\">{errors.name}</span>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              placeholder=\"Enter your email\"\n              className={errors.email ? 'error' : ''}\n              autoComplete=\"email\"\n            />\n            {errors.email && (\n              <span className=\"error-text\">{errors.email}</span>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              placeholder=\"Create a password\"\n              className={errors.password ? 'error' : ''}\n              autoComplete=\"new-password\"\n            />\n            {errors.password && (\n              <span className=\"error-text\">{errors.password}</span>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"confirmPassword\">Confirm Password</label>\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              value={formData.confirmPassword}\n              onChange={handleChange}\n              placeholder=\"Confirm your password\"\n              className={errors.confirmPassword ? 'error' : ''}\n              autoComplete=\"new-password\"\n            />\n            {errors.confirmPassword && (\n              <span className=\"error-text\">{errors.confirmPassword}</span>\n            )}\n          </div>\n\n          {errors.general && (\n            <div className=\"error-message\">\n              {errors.general}\n            </div>\n          )}\n\n          <button \n            type=\"submit\" \n            className=\"register-button\"\n            disabled={loading}\n          >\n            {loading ? 'CREATING ACCOUNT...' : 'REGISTER'}\n          </button>\n        </form>\n\n        <div className=\"register-footer\">\n          <p>Already have an account?</p>\n          <Link to=\"/login\" className=\"login-link\">\n            Back to Login\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterScreen;\n\n\n"],"names":["RegisterScreen","navigate","useNavigate","register","isAuthenticated","useAuth","formData","setFormData","useState","name","email","password","confirmPassword","errors","setErrors","loading","setLoading","useEffect","handleChange","e","value","target","_objectSpread","_jsx","className","children","_jsxs","onSubmit","async","preventDefault","validateForm","newErrors","length","test","Object","keys","result","success","general","error","err","htmlFor","type","id","onChange","placeholder","autoComplete","disabled","Link","to"],"sourceRoot":""}